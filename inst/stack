local function PUSH(vm) 
    vm:Push(op1);
end

local function POP(vm) 
    op1 = vm:Pop();
end

local function PUSHA(vm) 
    vm:Push(vm.EDI);
    if (vm.interrupt_flag) then return end
    vm:Push(vm.ESI);
    if (vm.interrupt_flag) then return end
    vm:Push(vm.EBP);
    if (vm.interrupt_flag) then return end
    vm:Push(vm.ESP);
    if (vm.interrupt_flag) then return end
    vm:Push(vm.EDX);
    if (vm.interrupt_flag) then return end
    vm:Push(vm.ECX);
    if (vm.interrupt_flag) then return end
    vm:Push(vm.EBX);
    if (vm.interrupt_flag) then return end
    vm:Push(vm.EAX);
end

local function POPA(vm) 
    vm.EAX = vm:Pop();
    if (vm.interrupt_flag) then return end
    vm.EBX = vm:Pop();
    if (vm.interrupt_flag) then return end
    vm.ECX = vm:Pop();
    if (vm.interrupt_flag) then return end
    vm.EDX = vm:Pop();
    if (vm.interrupt_flag) then return end
    vm:Pop(); -- ESP
    if (vm.interrupt_flag) then return end
    vm.EBP = vm:Pop();
    if (vm.interrupt_flag) then return end
    vm.ESI = vm:Pop();
    if (vm.interrupt_flag) then return end
    vm.EDI = vm:Pop();
end

local function RSTACK(vm) 
    if (op2 < 0 or op2 >= VM.MEMORY_MODEL) then
        vm:int_vm(ERR_STACK_ERROR, op2);
        return;
    end

    local val = vm.ReadCell(vm.SS + op2);
    if (vm.interrupt_flag) then return end

    op1 = val;
end

local function SSTACK(vm) 
    if (op1 < 0 or op1 >= MEMORY_MODEL) then
        vm:int_vm(ERR_STACK_ERROR, op1);
        return;
    end
    
    vm.WriteCell(vm.SS + op1, op2);
end

local function ENTER(vm) 
    vm:Push(vm.EBP);
    vm.EBP = vm.ESP + 1;
    vm.ESP = vm.ESP - op1;
end

local function LEAVE(vm) 
    vm.ESP = vm.EBP - 1;
    vm.EBP = vm:Pop();
end

return {
    { 9, 1, PUSH },
    { 30, 1, POP },
    { 114, 0, PUSHA },
    { 115, 0, POPA },
    { 117, 0, LEAVE },
    { 133, 2, RSTACK },
    { 134, 2, SSTACK },
    { 135, 1, ENTER },
}